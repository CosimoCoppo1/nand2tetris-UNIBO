// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//decodifica instruzione
	//si nominano i due diversi pin per determinare il tipo di istruzione
	Not(in=instruction[15], out=aIns);
	Not(in=aIns, out=cIns);  //cIns==instruction[15]
	
	//caricare i dati sul registro A
	And(a=cIns, b=instruction[5], out=aData);  // instruction[5]=d1 -> carica (e seleziona) registro A. Se cIns==1 and d1 allora esegui una C instruction
	Mux16(a=instruction, b=aluOut, sel=instruction[15], out=dataSelected);
	Or(a=aIns, b=aData, out=loadA); //carica il nuovo dato sul registro A se aIns oppure (cIns && d1)
	ARegister(in=dataSelected, load=loadA, out=outA); // caricare il dato sul registro A
	
	//seleziona A o M in base al bit-a=Instruction[12]
	Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);
	
	//settare il registro D prima di occuparsi della ALU
	And(a=cIns, b=instruction[4], out=loadD);        //instruction[4]=d2 -> carica il registro D (se==1).
	DRegister(in=aluOut, load=loadD, out=outD);
	
	ALU(x=outD , y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zr, ng=ng);
	
	//si stettano gli outputs tranne il PC sul quale sono necesarie ulteriori valuatzioni
	And16(a=true, b=aluOut, out=outM);
	And16(a=true, b=outA, out[0..14]=addressM);
	And(a=cIns, b=instruction[3], out=writeM);
	
	//valutare se deve saltare (jump), calcolare PCload e PC inc. Il PC deve valuare se caricare la istruzione contenuta nel registro A
	// j1.j2.j3
	// 000 nojump-> incrementa
    // 111 jump-> goto A "esegui l'istruzione indirizzata da A"
	///And(a=zr, b=instruction[1], out=jpZero);  //zr=1 se out==0, instruction[1]=j2 -> jump se out==0
	///And(a=ng, b=instruction[2], out=jpNeg);  //ng=1 se out<0, instruction[2]=j1 -> jump se out<0
	///Or(a=jpZero, b=jpNeg, out=notPositive);
	///Not(in=notPositive, out=positive);   //si distingue il caso in cui jump se non negativo nè zero
	///And(a=positive, b=instruction[0], out=jpPos);  //instruction[0]=j3 -> jump se out>0
	//selezionare condizione di salto
	///Or(a=jpZero, b=jpNeg, out=jpZeroNeg);
	///Or(a=jpZeroNeg, b=jpPos, out=jumpCondition);
	//jump se Cinstruction -> setto load per PC
	///And(a=cIns, b=jumpCondition, out=PCload);
	// se non salta allora incrementa
	///Not(in=PCload, out=PCinc);
	
	//si setta il PC
	///PC(in=outA, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
	
	Not(in=ng, out=pos);                           //ng=1 se out<0
    Not(in=zr, out=nzr);                           //zr=1 se out==0
	
	//if out>0 jump
    And(a=cIns, b=instruction[0], out=jgt);        //instruction[0]=j3 -> jump se out>0
    And(a=pos, b=nzr, out=posnzr);                 //out positivo  e out!=0 (cioè zr==0 -> nzr==1)
    And(a=jgt, b=posnzr, out=ld1);                 //se condizione di salto asserita e out è positivo allora salta
	
	//if out==0
    And(a=cIns, b=instruction[1], out=jeq);        //instruction[1]=j2 -> jump se out==0
    And(a=jeq, b=zr, out=ld2);                     //se condizione di salto asserita e out==0 (cioè zr==1) allora salta
	
	//if out<0
    And(a=cIns, b=instruction[2], out=jlt);        //instruction[2]=j1 -> jump se out<0
    And(a=jlt, b=ng, out=ld3);                     //se condizione di salto asserita e out<0 (cioè ng==1) allora salta
	
	//il PC salta se almeno una delle condizioni di salto è asserita
    Or(a=ld1, b=ld2, out=ldt);
    Or(a=ld3, b=ldt, out=PCload);
	
	Not(in=PCload, out=PCinc);
	PC(in=outA, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);	
	
}